{"id":1047531960,"lang":"cpp","lang_name":"C++","time":"2 weeks, 2 days","timestamp":1694529579,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1047531960/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted List II","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode *curr=head, *nextt=nullptr, *prev=nullptr;\n\n        if(!head || !head->next) return head;\n\n        while(curr && curr->next){\n            nextt=curr->next;\n            // check if there is chance of repeated\n            if(curr->val == nextt->val){\n                // start is curr and nextt will be max repeated  ka next node\n                // handle case when nextt is null then value giving -1 \n                while(curr->val == (nextt ? nextt->val : -1)){\n                    nextt=nextt->next;\n                }\n\n                // prev isnt there since repeat start from 1st node\n                if(prev!=nullptr){\n                    prev->next=nextt;\n                    curr=nextt;\n                }\n                // 1st node se ... x nodes tak dulicates h\n                else{\n                    curr=nextt;\n                    head=nextt;\n                }\n            }\n            // prev and curr changes \n            else{\n                prev=curr;\n                curr=curr->next;\n            }\n        }\n\n        return head;\n    }\n};","compare_result":"1111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"remove-duplicates-from-sorted-list-ii","has_notes":false,"flag_type":1}