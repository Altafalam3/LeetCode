{"id":1047546015,"lang":"cpp","lang_name":"C++","time":"2 weeks, 2 days","timestamp":1694530578,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1047546015/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted List II","memory":"11.2 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode *curr = head, *nextt = nullptr, *prev = nullptr;\n\n        if (!head || !head->next) return head;\n\n        while (curr && curr->next) {\n            nextt = curr->next;\n            // check if there is a chance of repetition\n            if (curr->val == nextt->val) {\n                // start is curr, and nextt will be the maximum repeated ka next node\n                // handle the case when nextt is null then value giving 101 out of range\n                while (curr->val == (nextt ? nextt->val : 101)) {\n                    ListNode* temp = nextt;\n                    nextt = nextt->next;\n                    delete temp; // Delete the node with duplicate value\n                }\n\n                // prev isn't there since repetition starts from the 1st node\n                if (prev != nullptr) {\n                    prev->next = nextt;\n                    delete curr; // Delete the current node\n                    curr = nextt;\n                }\n                // 1st node se ... x nodes tak dulicates h\n                else {\n                    ListNode* temp = head;\n                    head = nextt;\n                    delete temp; // Delete the head node\n                    curr = nextt;\n                }\n            }\n            // prev and curr changes\n            else {\n                prev = curr;\n                curr = curr->next;\n            }\n        }\n\n        return head;\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-list-ii","has_notes":false,"flag_type":1}