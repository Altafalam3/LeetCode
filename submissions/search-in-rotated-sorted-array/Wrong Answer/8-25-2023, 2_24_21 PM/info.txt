{"id":1031245350,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1692953661,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1031245350/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"N/A","code":"class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int low = 0, high = nums.size()-1;\n        int res = searchR(nums, low, high, target);\n        return res;\n    }\nprivate:\n    int searchR(vector<int>& nums,int low, int high, int target){\n        if(low > high) return -1;\n\n        int mid = low + (high-low)/2;\n\n        if(nums[mid]==target){\n            return mid;\n        }\n\n        // left side is sorted and right side is not sorted\n        else if(nums[low] < nums[mid]){\n            if(nums[low] <= target &&  target < nums[mid]){\n                return searchR(nums,low,mid-1,target);\n            }\n            else{\n                return searchR(nums,mid+1,high,target);\n            }\n        }\n\n        // right side is sorted since left side is not\n        else{\n            if(nums[mid] < target && target <= nums[high]){\n                return searchR(nums,mid+1,high,target);\n            }\n            else{\n                return searchR(nums,low,mid-1,target);\n            }\n        }\n        return -1;\n    }\n};","compare_result":"111111111110111111111111111111111111111111111111111111111110111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1}