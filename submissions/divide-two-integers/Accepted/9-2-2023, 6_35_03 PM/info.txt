{"id":1038431013,"lang":"cpp","lang_name":"C++","time":"3 weeks, 5 days","timestamp":1693659903,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1038431013/","is_pending":"Not Pending","title":"Divide Two Integers","memory":"6 MB","code":"class Solution {\npublic:\n    int divide(int dividend, int divisor) {\n        // Handle special cases\n        if (divisor == 0) {\n            return (dividend > 0) ? INT_MAX : INT_MIN;\n        }\n        if (dividend == 0) {\n            return 0;\n        }\n\n        // Determine the sign of the result\n        bool negative = (dividend < 0) ^ (divisor < 0);\n\n        // Take the absolute values of dividend and divisor\n        long long abs_dividend = llabs(static_cast<long long>(dividend));\n        long long abs_divisor = llabs(static_cast<long long>(divisor));\n\n        long long quotient = 0;\n        while (abs_dividend >= abs_divisor) {\n            long long temp = abs_divisor;\n            long long multiple = 1;\n            while (abs_dividend >= (temp << 1)) {\n                temp <<= 1;\n                multiple <<= 1;\n            }\n            abs_dividend -= temp;\n            quotient += multiple;\n        }\n\n        // Apply sign to the result\n        if (negative) {\n            quotient = -quotient;\n        }\n\n        // Handle overflow cases\n        if (quotient > INT_MAX) {\n            return INT_MAX;\n        }\n        if (quotient < INT_MIN) {\n            return INT_MIN;\n        }\n\n        return static_cast<int>(quotient);\n    }\n};\n","compare_resulttitle_slug":"divide-two-integers","has_notes":false,"flag_type":1}