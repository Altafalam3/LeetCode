{"id":1048279505,"lang":"cpp","lang_name":"C++","time":"2 weeks, 1 day","timestamp":1694600305,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1048279505/","is_pending":"Not Pending","title":"Minimum Path Sum","memory":"10.1 MB","code":"class Solution {\npublic:\n    int minPathSum(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n\n        vector<int> prev(m, 0), curr(m, 0);\n\n        // Base case filling\n        prev[0] = grid[0][0];\n\n        // Fill the first row\n        for (int j = 1; j < m; j++) {\n            prev[j] = grid[0][j] + prev[j - 1];\n        }\n\n        for (int i = 1; i < n; i++) {\n            // Initialize the first element of curr for each row\n            curr[0] = grid[i][0] + prev[0];\n            for (int j = 1; j < m; j++) {\n                int down = grid[i][j] + prev[j];\n                int right = grid[i][j] + curr[j - 1];\n                curr[j] = min(down, right);\n            }\n            // Copy curr to prev for the next row\n            prev = curr;\n        }\n\n        return prev[m - 1];\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-path-sum","has_notes":false,"flag_type":1}