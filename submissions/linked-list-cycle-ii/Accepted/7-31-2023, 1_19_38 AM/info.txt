{"id":1007984679,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1690746578,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1007984679/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"7.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n      \n      if(head==nullptr || head->next==nullptr) return nullptr;\n      \n      ListNode* slow=head, *fast=head;\n      ListNode* entry=head;\n      \n      while(fast!=nullptr && fast->next!=nullptr){\n          slow=slow->next;\n\n          fast=fast->next->next;\n\n\n          if(slow==fast){\n            while(slow!=entry){\n              slow=slow->next;\n              entry=entry->next;\n            }\n\n            return entry;\n          }\n       \n      }\n      return nullptr;\n   }\n};","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false,"flag_type":1}