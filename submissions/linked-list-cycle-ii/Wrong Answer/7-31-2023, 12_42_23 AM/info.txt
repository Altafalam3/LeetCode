{"id":1007962399,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1690744343,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1007962399/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n      \n      if(head==nullptr || head->next==nullptr) return nullptr;\n        ListNode* slow=head, *fast=head->next->next;\n      while(slow && fast){\n          if(slow==fast){\n            return slow;\n            }\n           else{\n             slow=slow->next;\n             fast=fast->next->next;\n       }\n    }\n      return nullptr;\n   }\n};","compare_result":"11111111010000000","title_slug":"linked-list-cycle-ii","has_notes":false,"flag_type":1}