{"id":1060768845,"lang":"cpp","lang_name":"C++","time":"1 day, 11 hours","timestamp":1695840507,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1060768845/","is_pending":"Not Pending","title":"Triangle","memory":"9.5 MB","code":"class Solution {\npublic:\n    int minimumTotal(vector<vector<int>>& triangle) {\n        int n = triangle.size();\n        vector<vector<int>> dp(n, vector<int>(n, -1));\n        return minTotal(0, 0, n, triangle, dp);\n    }\n\nprivate:\n    int minTotal(int i, int j, int n, vector<vector<int>>& triangle, vector<vector<int>>& dp) {\n        // Base case: reach the bottom row, return value in triangle.\n        if (i == n - 1) {\n            return triangle[i][j];\n        }\n\n        if (dp[i][j] != -1) {\n            return dp[i][j];\n        }\n\n        // result for the curr position by two possible paths.\n        int down1 = minTotal(i + 1, j, n, triangle, dp);\n        int down2 = minTotal(i + 1, j + 1, n, triangle, dp);\n\n        // Update dp with the min of two paths plus the current element.\n        dp[i][j] = min(down1, down2) + triangle[i][j];\n\n        return dp[i][j];\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111","title_slug":"triangle","has_notes":false,"flag_type":1}