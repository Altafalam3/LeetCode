{"id":1053330495,"lang":"cpp","lang_name":"C++","time":"1 week, 2 days","timestamp":1695107756,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1053330495/","is_pending":"Not Pending","title":"String Compression","memory":"9.4 MB","code":"class Solution {\npublic:\n    int compress(vector<char>& chars) {\n        int writeIndex = 0;  // Index for writing compressed characters\n        int count = 1;       // Count of consecutive characters\n        int n = chars.size();\n\n        for (int i = 1; i < n; i++) {\n            if (chars[i] == chars[i - 1]) {\n                count++; // Increment count for consecutive characters\n            } else {\n                chars[writeIndex++] = chars[i - 1]; // Write the current character\n\n                if (count > 1) {\n                    // If count is greater than 1, write it as characters\n                    string countStr = to_string(count);\n                    for (char c : countStr) {\n                        chars[writeIndex++] = c;\n                    }\n                }\n\n                count = 1; // Reset the count for the new character\n            }\n        }\n\n        // Write the last character and its count\n        chars[writeIndex++] = chars[n - 1];\n        if (count > 1) {\n            string countStr = to_string(count);\n            for (char c : countStr) {\n                chars[writeIndex++] = c;\n            }\n        }\n\n        return writeIndex; // length of compressed sequence\n    }\n};\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"string-compression","has_notes":false,"flag_type":1}