{"id":1029844123,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1692815667,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1029844123/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"13.7 MB","code":"class Solution {\npublic:\n    vector<int> searchRange(vector<int>& nums, int target) {\n        int left = findLeftBound(nums, target);\n        int right = findRightBound(nums, target);\n        \n        if (left > right) {\n            return {-1, -1};\n        } else {\n            return {left, right};\n        }\n    }\n\nprivate:\n    int findLeftBound(vector<int>& nums, int target) {\n        int left = 0;\n        int right = nums.size() - 1;\n        int result = -1;\n\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            \n            if (nums[mid] >= target) {\n                result = mid;\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n\n        return result;\n    }\n\n    int findRightBound(vector<int>& nums, int target) {\n        int left = 0;\n        int right = nums.size() - 1;\n        int result = -1;\n\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) {\n                result = mid;\n            }\n            if (nums[mid] <= target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n\n        return result;\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1}