{"id":1015439838,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1691481304,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1015439838/","is_pending":"Not Pending","title":"Rotate List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        if(!head) return head;\n\n        int count=1;\n\n        ListNode* temp=head;\n\n        while(temp->next!=nullptr){\n\n            count++;\n\n            temp=temp->next;\n\n        }\n        temp->next=head;\n\n        int check= k%count;\n        ListNode *newHead=nullptr;\n\n        while(check!=0){\n            head=head->next;\n            check--;\n        }\n        newHead=head->next;\n        head->next=nullptr;\n        return newHead;\n        \n    }\n};","compare_result":"111111100000001001010000001000000000000100000010000000000000000000000000000000000010000001000000000000000000000000000000000001000100000000000000000000000000000000000000001000000000000000000000000000000000000000001000000000000000000","title_slug":"rotate-list","has_notes":false,"flag_type":1}