{"id":1042857100,"lang":"cpp","lang_name":"C++","time":"3Â weeks","timestamp":1694075107,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/1042857100/","is_pending":"Not Pending","title":"Reorder List","memory":"17.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    void reorderList(ListNode* head) {\n        if(!head || !head->next || !head->next->next){\n            return;\n        }\n\n        ListNode *slow=head, *fast=head;\n        // finding mid, if even length leftmost mid we get\n        while(fast->next!=nullptr && fast->next->next!=nullptr){\n            slow=slow->next;\n            fast=fast->next->next;\n        }\n\n        // Reverse After mid terms and dont link it to first half\n\n        ListNode *prev=slow, *curr=slow->next, *nextt=nullptr;\n        prev->next=nullptr;\n        while(curr){\n            nextt=curr->next;\n            curr->next=prev;\n            prev=curr;\n            curr=nextt;\n        }\n\n\n        // Merge the two halves\n        ListNode *first = head, *second = prev;\n        ListNode *firstNext, *secondNext;\n        while (first && second) {\n            firstNext = first->next;\n            secondNext = second->next;\n            \n            first->next = second;\n            second->next = firstNext;\n            \n            first = firstNext;\n            second = secondNext;\n        }\n\n    }\n};","compare_result":"111111111111","title_slug":"reorder-list","has_notes":false,"flag_type":1}