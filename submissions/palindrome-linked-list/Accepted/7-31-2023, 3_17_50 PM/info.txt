{"id":1008376214,"lang":"cpp","lang_name":"C++","time":"1Â month, 4Â weeks","timestamp":1690796870,"status":10,"status_display":"Accepted","runtime":"198 ms","url":"/submissions/detail/1008376214/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"118 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        ListNode* slow =head;\n        ListNode* fast =head;\n        ListNode*temp=nullptr;\n        int count=0;\n\n        while(fast->next && fast->next->next){\n            slow=slow->next;\n            fast=fast->next->next;\n        }\n        temp=slow->next;\n        if(fast->next!=nullptr){\n            fast=fast->next;\n        }\n        //reverse from temp to fast\n        ListNode *prev=nullptr,*nextt=temp;\n        while(temp){\n            nextt=temp->next;\n            temp->next=prev;\n            prev=temp;\n            temp=nextt;\n        }\n        slow->next=prev;\n        slow=slow->next;\n        while(slow){\n          if(slow->val!=head->val){\n              return false;\n           }\n           slow=slow->next;\n           head=head->next;\n         }\n      return true;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false,"flag_type":1}