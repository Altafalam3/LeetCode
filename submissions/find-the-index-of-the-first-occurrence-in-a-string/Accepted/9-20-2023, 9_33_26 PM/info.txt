{"id":1054654267,"lang":"cpp","lang_name":"C++","time":"1 week, 1 day","timestamp":1695225806,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1054654267/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"6.7 MB","code":"class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        if (needle.empty()) {\n            return 0;\n        }\n\n        // longest proper prefix\n        vector<int> lps = computeLPS(needle);\n\n        int i = 0; // Index for haystack\n        int j = 0; // Index for needle\n\n        while (i < haystack.size()) {\n            if (haystack[i] == needle[j]) {\n                i++;\n                j++;\n            }\n\n            if (j == needle.size()) {\n                return i - j; // Found a match\n            }\n\n            if (i < haystack.size() && haystack[i] != needle[j]) {\n                if (j != 0) {\n                    j = lps[j - 1];\n                } else {\n                    i++;\n                }\n            }\n        }\n\n        return -1; // Needle not found in haystack\n    }\n\nprivate:\n    vector<int> computeLPS(const string& needle) {\n        int length = 0; // Length of the previous longest prefix suffix\n\n        vector<int> lps(needle.size(), 0);\n\n        int i = 1;\n        while (i < needle.size()) {\n            if (needle[i] == needle[length]) {\n                length++;\n                lps[i] = length;\n                i++;\n            } \n            else {\n                if (length != 0) {\n                    length = lps[length - 1];\n                } \n                else {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n\n        return lps;\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1}