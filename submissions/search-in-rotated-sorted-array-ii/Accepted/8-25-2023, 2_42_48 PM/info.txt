{"id":1031259795,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1692954768,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1031259795/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array II","memory":"14 MB","code":"class Solution {\npublic:\n    bool search(vector<int>& nums, int target) {\n        int low = 0, high = nums.size()-1;\n        bool res = searchR(nums, low, high, target);\n        return res;\n    }\n\nprivate:\n    bool searchR(vector<int>& nums,int low, int high, int target){\n        if(low > high) return false;\n\n        int mid = low + (high-low)/2;\n\n        if(nums[mid]==target){\n            return true;\n        }\n\n        // Handle duplicate values search both sides until get\n        if (nums[low] == nums[mid] && nums[mid] == nums[high]) {\n            return searchR(nums, low + 1, high - 1, target);\n        }\n\n        // left side is sorted and right side is not sorted\n        else if(nums[low] <= nums[mid]){\n            if(nums[low] <= target &&  target < nums[mid]){\n                return searchR(nums,low,mid-1,target);\n            }\n            else{\n                return searchR(nums,mid+1,high,target);\n            }\n        }\n\n        // right side is sorted since left side is not\n        else if (nums[low] > nums[mid]) {\n            if(nums[mid] < target && target <= nums[high]){\n                return searchR(nums,mid+1,high,target);\n            }\n            else{\n                return searchR(nums,low,mid-1,target);\n            }\n        }\n        return false;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array-ii","has_notes":false,"flag_type":1}