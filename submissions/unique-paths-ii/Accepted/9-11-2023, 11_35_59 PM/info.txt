{"id":1046763788,"lang":"cpp","lang_name":"C++","time":"2 weeks, 3 days","timestamp":1694455559,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1046763788/","is_pending":"Not Pending","title":"Unique Paths II","memory":"7.7 MB","code":"class Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        int m = obstacleGrid.size();\n        int n = obstacleGrid[0].size();\n\n        // empty or the starting cell is blocked\n        if (m == 0 || n == 0 || obstacleGrid[0][0] == 1) {\n            return 0;\n        }\n\n        vector<int> curr(n, 0);\n\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if (obstacleGrid[i][j] == 0) {\n                    // base case, starting cell, set curr[j] to 1\n                    if (i == 0 && j == 0) {\n                        curr[j] = 1;\n                    }\n                    else {\n                        // handle first row and first cols filling\n                        curr[j] = (i > 0 ? curr[j] : 0) + (j > 0 ? curr[j - 1] : 0);\n                    }\n                }\n\n                else {\n                    curr[j] = 0; // Reset curr[j] to 0 if an obstacle is encountered\n                }\n            }\n        }\n\n        return curr[n - 1];\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111","title_slug":"unique-paths-ii","has_notes":false,"flag_type":1}