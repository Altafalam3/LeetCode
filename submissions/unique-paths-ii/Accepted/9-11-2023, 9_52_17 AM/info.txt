{"id":1046198955,"lang":"cpp","lang_name":"C++","time":"2 weeks, 4 days","timestamp":1694406137,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1046198955/","is_pending":"Not Pending","title":"Unique Paths II","memory":"8 MB","code":"class Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        int m = obstacleGrid.size();\n        int n = obstacleGrid[0].size();\n        int i=0,j=0;\n\n        vector<vector<int>> dp(m, vector<int>(n,-1));\n\n        return uniquePathsWithObstacle(obstacleGrid, m, n, i, j, dp);\n\n    }\n\nprivate:\n    int uniquePathsWithObstacle(vector<vector<int>>& obstacleGrid, int m, int n, int i, int j, vector<vector<int>>& dp) {\n\n        // out of bounds\n        if(i>(m-1) || j>(n-1)){\n            return 0;\n        }\n\n        // obstacle found\n        if(obstacleGrid[i][j]==1){\n            return 0;\n        }\n\n        // reached destination\n        if(i==(m-1)&&j==(n-1)){\n            return 1;\n        }\n\n        if(dp[i][j]!=-1){\n            return dp[i][j];\n        }\n\n        int down = uniquePathsWithObstacle(obstacleGrid, m, n, i+1, j, dp);\n        int right = uniquePathsWithObstacle(obstacleGrid, m, n, i, j+1, dp);\n\n        dp[i][j] = right + down;\n        return dp[i][j];\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"unique-paths-ii","has_notes":false,"flag_type":1}