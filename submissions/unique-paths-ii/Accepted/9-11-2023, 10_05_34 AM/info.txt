{"id":1046206350,"lang":"cpp","lang_name":"C++","time":"2 weeks, 4 days","timestamp":1694406934,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1046206350/","is_pending":"Not Pending","title":"Unique Paths II","memory":"7.8 MB","code":"class Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        int m = obstacleGrid.size();\n        int n = obstacleGrid[0].size();\n        int i=0,j=0;\n\n        vector<vector<int>> dp(m, vector<int>(n, 0));\n\n        // Initialize the top-left cell\n        dp[0][0] = (obstacleGrid[0][0] == 0) ? 1 : 0;\n\n        // Initialize the first column\n        for (int i = 1; i < m; i++) {\n            if (obstacleGrid[i][0] == 0){\n                // compare with above rows value\n                dp[i][0] = dp[i - 1][0];\n            }\n        }\n\n        // Initialize the first row\n        for (int j = 1; j < n; j++) {\n            if (obstacleGrid[0][j] == 0){\n                // compare with left columns value\n                dp[0][j] = dp[0][j - 1];\n            }\n        }\n\n        for(int i=1; i<m; i++){\n            for(int j=1; j<n; j++){\n                if(obstacleGrid[i][j]==0){\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1];\n                }\n            }\n        }\n\n        return dp[m-1][n-1];\n\n    }\n\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"unique-paths-ii","has_notes":false,"flag_type":1}