{"id":1025909728,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1692460655,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1025909728/","is_pending":"Not Pending","title":"Combination Sum II","memory":"N/A","code":"class Solution {\npublic:\n    void generateCombinations(const vector<int>& candidates, int ind, int sum, vector<int>& currentCombination, set<vector<int>>& result, int target) {\n        if (sum > target) return;\n        if (ind == candidates.size()) {\n            if (sum == target) {\n                sort(currentCombination.begin(), currentCombination.end());\n                result.insert(currentCombination);\n            }\n            return;\n        }\n        \n        currentCombination.push_back(candidates[ind]);\n\n        generateCombinations(candidates, ind + 1, sum + candidates[ind], currentCombination, result, target);\n\n        currentCombination.pop_back();\n\n        // Skip consecutive duplicate elements\n        while ( candidates[ind] == candidates[ind + 1]) {\n            ind++;\n        }\n        \n        generateCombinations(candidates, ind + 1, sum, currentCombination, result, target);\n    }\n    \n    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {\n        set<vector<int>> resultSet;  // Using set to automatically handle duplicate removal\n        vector<int> currentCombination;\n        \n        sort(candidates.begin(), candidates.end());  // Sort candidates to handle duplicates\n        generateCombinations(candidates, 0, 0, currentCombination, resultSet, target);\n        \n        vector<vector<int>> result(resultSet.begin(), resultSet.end());\n        return result;\n    }\n};\n","compare_result":"11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1}