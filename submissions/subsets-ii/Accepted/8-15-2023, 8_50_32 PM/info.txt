{"id":1022178663,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1692112832,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1022178663/","is_pending":"Not Pending","title":"Subsets II","memory":"7.4 MB","code":"class Solution {\npublic:\n    void generateSubsets(vector<int> &nums, int ind, vector<int> &currentSubset, vector<vector<int>> &result) {\n        result.push_back(currentSubset);  // Always push the current subset\n        \n        for (int i = ind; i < nums.size(); ++i) {\n            if (i > ind && nums[i] == nums[i - 1]) {\n                continue;  // Skip duplicates to prevent duplicate subsets\n            }\n            // take and dont take method\n            currentSubset.push_back(nums[i]);\n            generateSubsets(nums, i + 1, currentSubset, result);\n            currentSubset.pop_back();\n        }\n    }\n    \n    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\n        sort(nums.begin(), nums.end());  // Sort the input vector\n        \n        vector<vector<int>> result;\n        vector<int> currentSubset;\n        \n        generateSubsets(nums, 0, currentSubset, result);\n        \n        return result;\n    }\n};\n","compare_result":"11111111111111111111","title_slug":"subsets-ii","has_notes":false,"flag_type":1}