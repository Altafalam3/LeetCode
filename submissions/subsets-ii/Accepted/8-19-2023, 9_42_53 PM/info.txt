{"id":1025926517,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1692461573,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1025926517/","is_pending":"Not Pending","title":"Subsets II","memory":"7.5 MB","code":"class Solution {\npublic:\n    void generateCombinations(const vector<int>& nums, int ind, vector<int>& currentCombination, vector<vector<int>>& result) {\n        if (ind == nums.size()) {\n            result.push_back(currentCombination);\n            return;\n        }\n        \n        currentCombination.push_back(nums[ind]);\n\n        generateCombinations(nums, ind + 1,currentCombination, result);\n\n        currentCombination.pop_back();\n\n        // Skip consecutive duplicate elements\n        while (ind + 1 < nums.size() && nums[ind] == nums[ind + 1]) {\n            ind++;\n        }\n        \n        generateCombinations(nums, ind + 1, currentCombination, result);\n    }\n    \n    \n    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\n        vector<vector<int>> result;\n        vector<int> currentCombination;\n        \n        sort(nums.begin(), nums.end());  // Sort nums to handle duplicates\n        generateCombinations(nums, 0, currentCombination, result);\n        \n        return result;\n    }\n};\n","compare_result":"11111111111111111111","title_slug":"subsets-ii","has_notes":false,"flag_type":1}